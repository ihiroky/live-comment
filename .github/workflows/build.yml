name: Check

on: push

jobs:
#
# Run tests and code checkers
#
  check:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'
      - run: yarn install --frozen-lockfile --network-timeout 180000

      - name: Run checks
        run: |
          yarn eslint --ext ts,tsx --max-warnings 0 packages/app/src
          yarn --cwd packages/app/ tsc -b
          yarn jest --reporters=default --reporters=jest-junit --coverage --coverageDirectory reports/coverage
        shell: bash

      - name: Test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test report on ${{ matrix.os }}
          path: reports/jest-*.xml
          reporter: jest-junit

      - name: Coverage report
        uses: ihiroky/lcov-reporter-action@master
        with:
          name: Coverage report on ${{ matrix.os }}
          github-token: ${{ secrets.github_token }}
          lcov-file: reports/coverage/lcov.info
#
# Build desktop app
#
  desktop:
    needs: check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'
      - run: yarn install --frozen-lockfile --network-timeout 180000

      - name: Build apps
        run: |
          yarn --cwd packages/app/ clean
          yarn --cwd packages/app/ build-desktop
        env:
          NODE_ENV: production

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.github_token }}
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
          skip_build: true
          package_root: packages/app/
          args: -c electron-builder-config.json

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: live-comment-for-${{ matrix.os }}-${{ github.run_number }}
          path: packages/app/dist/live-comment*
#
# Build server side apps
#
  server-side:
    needs: check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'
      - run: yarn install --frozen-lockfile --network-timeout 180000

      - name: Build apps
        run: |
          yarn --cwd packages/app/ clean
          yarn --cwd packages/app/ build-comment
          yarn --cwd packages/app/ build-servers

      - name: Create release directory tree
        run: |
          mkdir -p build/apps/server
          cp -a packages/app/dist/bundle/comment  build/apps/comment
          cp -a packages/app/resources/icon@4.png build/apps/comment/favicon.ico
          cp -a packages/app/resources/logo.png   build/apps/comment/logo.png
          cp -a packages/app/src/server/scripts/* build/apps/server/
          cp -a packages/app/dist/bundle/server/* build/apps/server/
        shell: bash

      - name: Archive apps
        uses: ihiroky/archive-action@v1
        with:
          file_path: build/server-apps.zip
          root_dir: build/apps/

      - name: Gets latest release info
        id: latest_release
        uses: octokit/request-action@v2
        with:
          route: GET /repos/ihiroky/live-comment/releases?per_page=1&page=1"
          owner: octokit
          repo: request-action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload asset to github release if draft release exists.
        id: upload-release-asset
        if: ${{ steps.latest_release.outputs.data[0].draft == true }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.latest_release_info.outputs.upload_url }}
          asset_path: build/server-apps.zip
          asset_name: server-apps.zip
          asset_content_type: application/zip

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: server-apps-${{ github.run_number }}
          path: build/apps/
#
# Buid browser extension
#
  browser-extension-for-live-comment_ga:
    needs: check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'
      - run: yarn install --frozen-lockfile --network-timeout 180000

      - name: Build apps
        run: |
          yarn --cwd packages/app/ clean
          yarn --cwd packages/app/ build-extension
        env:
          LC_WS_URL: wss://g1.live-comment.ga/app
          LC_API_URL: https://g1.live-comment.ga/api

      - name: Create release directory tree
        run: |
          mkdir -p build/apps/
          cp -a packages/app/dist/bundle/extension build/apps/browser-extension
        shell: bash

      - name: Archive apps
        uses: ihiroky/archive-action@v1
        with:
          file_path: build/browser-extension.zip
          root_dir: build/apps/

      - name: Gets latest release info
        id: latest_release
        uses: octokit/request-action@v2
        with:
          route: GET /repos/ihiroky/live-comment/releases?per_page=1&page=1"
          owner: octokit
          repo: request-action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload asset to github release if draft release exists.
        id: upload-release-asset
        if: ${{ steps.latest_release.outputs.data[0].draft == true }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.latest_release.outputs.data[0].upload_url }}
          asset_path: build/browser-extension.zip
          asset_name: browser-extension.zip
          asset_content_type: application/zip

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: server-apps-${{ github.run_number }}
          path: build/apps/
